{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
{\f40\froman\fcharset238\fprq2 Times New Roman CE;}{\f41\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f43\froman\fcharset161\fprq2 Times New Roman Greek;}{\f44\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f45\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f46\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f47\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f48\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\listtable{\list\listtemplateid-800916992
\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel
\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 }}\ls1}}{\*\rsidtbl \rsid5183391\rsid15008649}{\*\generator Microso
ft Word 11.0.5604;}{\info{\author TvmServer}{\operator TvmServer}{\creatim\yr2005\mo1\dy17\hr12\min21}{\revtim\yr2005\mo1\dy17\hr12\min21}{\version2}{\edmins0}{\nofpages6}{\nofwords1502}{\nofchars8564}{\*\company Dundas India}{\nofcharsws10046}
{\vern24689}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl\rsidroot15008649 \fet0
\sectd \linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\fs48\cf2\insrsid15008649 COXEdit Description}{\b\fs48\insrsid15008649 
\par }{\b\fs16\insrsid15008649 Copyright \'a9 }{\b\fs16\insrsid15008649 The Code Project}{\b\fs16\insrsid15008649  1997-1999, All Rights Reserved 
\par }{\insrsid15008649 
\par COXEdit is CEdit derived class that extends the functionality of standard edit control. 
\par 
\par COXEdit allows you to easily set}{\insrsid15008649 /}{\insrsid15008649 change the following control's features: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls1\rin0\lin720\itap0\pararsid15008649 {\insrsid15008649 text color 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}background color 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}tooltip text 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}mask that defines literals (uneditable symbols) 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par It's really easy to use COXEdit class. You just work with it as with standard CEdit class plus you can call the following functions in order to exploit new features:
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\ul\cf2\insrsid15008649 SetTextColor}{\insrsid15008649 ()
\par }{\ul\cf2\insrsid15008649 GetTextColor}{\insrsid15008649 () 
\par }{\ul\cf2\insrsid15008649 SetBkColor}{\insrsid15008649 ()
\par }{\ul\cf2\insrsid15008649 GetBkColor}{\insrsid15008649 ()
\par }{\ul\cf2\insrsid15008649 SetToolTipText}{\insrsid15008649 ()
\par }{\ul\cf2\insrsid15008649 GetToolTipText}{\insrsid15008649 () 
\par }{\ul\cf2\insrsid15008649 SetMask}{\insrsid15008649 ()
\par }{\ul\cf2\insrsid15008649 GetMask}{\insrsid15008649 ()
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 Refer to the }{\ul\cf2\insrsid15008649 class function reference}{\insrsid15008649  for details on all public functions. 
\par 
\par The most interesting new feature is the ability to set mask of literals to the control. Mask should be specified as "}{\b\cf2\insrsid15008649 LeftLiterals}{\b\cf6\insrsid15008649 #}{\b\cf2\insrsid15008649 RightLiterals}{\insrsid15008649 " where '}{
\cf6\insrsid15008649 #}{\insrsid15008649 ' stands for editable contents (input data) and '}{\cf2\insrsid15008649 LeftLiterals}{\insrsid15008649 ' defines the uneditable text that will be displayed to the left from editable text and '}{
\cf2\insrsid15008649 RightLiterals}{\insrsid15008649 ' defines the text that will be displayed to the right from editable text. E.g. you can define mask as "Phone: #". 
\par 
\par }{\ul\cf6\insrsid15008649 NOTE}{\insrsid15008649 . If you have to use '#' symbol as literal then you have to use '##' instead. 
\par 
\par In order to retrieve only the data that was typed in you can use the following function: 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\ul\cf2\insrsid15008649 GetInputData}{\insrsid15008649 ()
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par Also COXEdit control internally provides support for two different edit modes: insert (the default) and overtype ones. When user presses '}{\b\insrsid15008649 Ins}{\insrsid15008649 ' key the editing 
\par modes are switched. Programmatically you can change edit mode using }{\ul\cf2\insrsid15008649 SetInsertMode}{\insrsid15008649 () function. in order to retrieve the flag that specifies current edit mode you can use }{\ul\cf2\insrsid15008649 GetInsertMode}{
\insrsid15008649 () function.
\par 
\par In our library we provide a number of special derivation of COXEdit control: COXNumericEdit, COXCurrencyEdit, COXPhysicalEdit controls (angle, length, temperature and time edit controls). 
\par 
\par 
\par 
\par 
\par }{\b\fs48\cf2\insrsid15008649 COXNumericEdit }{\b\fs48\insrsid15008649 
\par }{\b\fs16\insrsid15008649 Copyright \'a9 }{\b\fs16\insrsid15008649 The Code Project}{\b\fs16\insrsid15008649  1997 1999, All Rights Reserved 
\par }{\insrsid15008649 
\par COXNumericEdit is }{\ul\cf2\insrsid15008649 COXEdit}{\insrsid15008649 
 derived class that was designed specifically to support editing of numeric data. While all COXEdit features are available in COXNumericEdit class there are a lot of additional features introduced in this class t
hat primarily have to do with the numeric data editing and displaying rules. 
\par The following features are available: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls1\rin0\lin720\itap0\pararsid15008649 {\insrsid15008649 
max number of decimal digits that might be typed in (indefinite number is one of the options) 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}symbol that represent decimal separator 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}number of fractional digits displayed (value of zero means there is no fractional part) 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}number of decimal digits divided in groups 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}symbol that represent group separator 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}flag that specifies if leading zero must be displayed or not 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}text color for negative value 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}format of numeric data for positive value 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}format of numeric data for negative value 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par Initially COXNumericEdit control retrieves default locale data for above described settings, but all of them can be changed at runtime using public functions defined in COXNumericEdit class (refer to }{\ul\cf2\insrsid15008649 class function reference}{
\insrsid15008649  for details). 
\par 
\par We would like to mention that format for positive and negative values must be defined as "}{\b\cf2\insrsid15008649 Literals}{\b\cf6\insrsid15008649 1.1}{\b\cf2\insrsid15008649 Literals}{\insrsid15008649 ", where "}{\cf6\insrsid15008649 1.1}{
\insrsid15008649 " stands for numeric value and "}{\cf2\insrsid15008649 Literals}{\insrsid15008649 " could consist of any symbol(s). E.g. if format "(1.1)" had been specified for negative value then value -5.26 would have been displayed as "(5.26)"
\par 
\par 
\par 
\par }{\b\fs48\cf2\insrsid15008649 COXCurrencyEdit}{\b\fs48\insrsid15008649 
\par }{\b\fs16\insrsid15008649 Copyright \'a9 }{\b\fs16\insrsid15008649 The Code Project}{\b\fs16\insrsid15008649  1997 1999, All Rights Reserved 
\par }{\insrsid15008649 
\par COXCurrencyEdit is }{\ul\cf2\insrsid15008649 COXNumericEdit}{\insrsid15008649  derived class that was designed specifically to support editing of currency data. Currency is numeric data but it is also 
\par required to display currency name in the control. So COXCurrencyEdit class merely add following two functions in which you can set or retrieve currency name 
\par }\pard \ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\ul\cf2\insrsid15008649 SetCurrencyName}{\insrsid15008649 ()
\par }{\ul\cf2\insrsid15008649 GetCurrencyName}{\insrsid15008649 () 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 By default we use default locale to get currency name. 
\par 
\par We have to note that format for positive and negative values for COXCurrencyEdit must include the placeholder for currency name as one of the literals. We use '}{\b\cf6\insrsid15008649 $}{\insrsid15008649 
' symbol as universal currency placeholder. E.g. if format "}{\b\insrsid15008649 1.1$}{\insrsid15008649 " had been specified for positive value using }{\ul\cf2\insrsid15008649 SetPositiveFormat}{\insrsid15008649 
() function then value 5.26 would have been displayed as "5.26$"
\par 
\par 
\par 
\par }{\fs20\insrsid15008649 
\par }{\b\fs48\cf2\insrsid15008649 COXDropEdit}{\b\fs48\insrsid15008649 
\par }{\b\fs16\insrsid15008649 Copyright \'a9 }{\b\fs16\insrsid15008649 The Code Project}{\b\fs16\insrsid15008649  1997 1999, All Rights Reserved
\par }{\insrsid15008649 
\par }{\b\insrsid15008649 COXDropEdit}{\insrsid15008649  is the }{\b\cf1\insrsid15008649 template}{\insrsid15008649  class that provides the functionality of adding dr
opdown button to any edit control. Dropdown button is displayed on the right or left side of the edit box and takes all height of the control window. The width of the dropdown button can be set programmatically (by default we use the width of the current 
width of the scroll bar). 
\par 
\par The dropdown button is clickable and combination of 'pressed down' and 'unpressed' events would generate 'dropdown' event that can be handled by a programmer. By default, COXDropEdit class allows you to display associated menu (s
ee below how to associate a menu with COXDropEdit).
\par At any time you can hide or show the dropdown button. Internally, the dropdown button resides in the }{\b\insrsid15008649 non-client area}{\insrsid15008649  so this class can be safely used with most of customized edit controls. E.g. you can us
e it with our extended controls (}{\ul\cf2\insrsid15008649 COXEdit}{\insrsid15008649 , }{\ul\cf2\insrsid15008649 COXNumericEdit}{\insrsid15008649 , }{\ul\cf2\insrsid15008649 COXCurrencyEdit}{\insrsid15008649 , }{\ul\cf2\insrsid15008649 COXMaskedEdit}{
\insrsid15008649 ) without any problems. In fact, we've updated our }{\ul\cf2\insrsid15008649 COXPhysicalEdit}{\insrsid15008649 
 class to be derived from COXDropEdit in order to provide the functionality of changing the base unit by clicking on the dropdown button and choosing the unit from the popup menu.
\par 
\par A programmer would normally use COXDropEdit class in order to derive from i
t. Let's go through the steps of creating a simple edit control that will display popup menu as a result of clicking on the dropdown button and after a user choose an item in the menu the text in the edit box will be updated correspondingly.
\par 
\par 1)\~\~\~ Derive your own class from COXDropEdit using any existing edit class as the base one:
\par 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\b\i\insrsid15008649 class CMenuEdit: public COXDropEdit<CEdit>
\par }{\insrsid15008649 
\par In this case we declare the class that would use standard CEdit as the base class
\par 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 2)\~\~\~ Declare the following protected virtual function in the class that will be called every time the dropdown button is clicked:
\par 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\b\insrsid15008649 virtual void OnDropButton();
\par }{\insrsid15008649 
\par In our case we would use the default implementation of this function as long as we are going to dis
play the menu (this functionality provided by COXDropEdit by default). But, generally, you can put here any functionality you please: e.g display popup window or dialog.
\par 
\par }{\i\insrsid15008649 void CMenuEdit::OnDropButton()
\par \{
\par \~\~\~ COXDropEdit<CEdit>::OnDropButton();
\par \}}{\insrsid15008649 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par 3)\~\~\~ Declare the following protected member for the popup menu that will be displayed when the dropdown button is clicked:
\par 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\b\insrsid15008649 CMenu m_menu;
\par }{\insrsid15008649 
\par In order to associate a menu with COXDropEdit object you have to call the following COXDropEdit function:
\par 
\par }{\ul\cf2\insrsid15008649 AssociateMenu();
\par }{\insrsid15008649 
\par and the pointer to the associated menu can be retrieved using this function:
\par 
\par }{\ul\cf2\insrsid15008649 GetAssociatedMenu();}{\insrsid15008649 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par 4)\~\~\~ So we need to create popup menu and associate it with the object. We suggest you can do that in the following COXDropEdit protected virtual function that should be overridden in CMenuEdit class:
\par 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\b\insrsid15008649 virtual BOOL Initialize();
\par }{\insrsid15008649 
\par This function is called }{\ul\insrsid15008649 right after creation or subclassing of existed control}{\insrsid15008649 
. Primarily it was designed in order to provide a programmer with the functionality that can be used in order to safely initialize the control. This function }{\b\insrsid15008649 must}{\insrsid15008649 
 return TRUE if the control has been successfully initialized or FALSE otherwise. In your implementation you }{\b\insrsid15008649 must}{\insrsid15008649  call the parent implementation first of all.
\par 
\par }{\i\insrsid15008649 BOOL CMenuEdit::Initialize()
\par \{
\par \~\~\~ if(!COXDropEdit<CEdit>::Initialize())
\par \~\~\~\~\~\~\~ return FALSE;
\par 
\par \~\~\~ if(!m_menu.CreatePopupMenu())
\par \~\~\~\~\~\~\~ return FALSE;
\par \~\~\~ for(int nIndex=1; nIndex<=10; nIndex++)
\par \~\~\~ \{
\par \~\~\~\~\~\~\~ CString sMenuText;
\par \~\~\~\~\~\~\~ sMenuText.Format(_T("Item %d"),nIndex);
\par \~\~\~\~\~\~\~ m_menu.AppendMenu(MF_STRING,nIndex,sMenuText);
\par \~\~\~ \}
\par \~\~\~ AssociateMenu(&m_menu);
\par 
\par \~\~\~ return TRUE;
\par \}}{\insrsid15008649 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par 5)\~\~\~ In our case we display popup menu as a result of dropdown event. In order to handle the process of choosing the menu item we have to provide }{\b\insrsid15008649 WM_COMMAND}{\insrsid15008649  handler for the class using }{\b\insrsid15008649 
ON_COMMAND_RANGE()}{\insrsid15008649  or }{\b\insrsid15008649 ON_COMMAND()}{\insrsid15008649  macro. In our case our actions are not going to depend on the chosen item so we would define our handler as follows:
\par 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\i\insrsid15008649 afx_msg void OnMenuSelect(UINT nID);
\par . . . . . . . . . . . . . . . . . . 
\par BEGIN_MESSAGE_MAP(CMenuEdit, CEdit)
\par \~\~\~ //\{\{AFX_MSG_MAP(CMenuEdit)
\par \~\~\~ //\}\}AFX_MSG_MAP
\par \~\~\~ ON_COMMAND_RANGE(1,10,OnMenuSelect)
\par END_MESSAGE_MAP()
\par . . . . . . . . . . . . . . . . . . 
\par void CMenuEdit::OnMenuSelect(UINT nID)
\par \{
\par \~\~\~ CString sItem;
\par \~\~\~ m_menu.GetMenuString(nID,sItem,MF_BYCOMMAND);
\par \~\~\~ CString sText;
\par \~\~\~ sText.Format(_T("<%s> has been picked"),sItem);
\par 
\par \~\~\~ SetWindowText(sText);
\par \}}{\insrsid15008649 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par 6)\~\~\~ Basically we went through all the major steps that should be taken in order to implement COXDropEdit derived object. Below you will find information about some useful COXDropEdit functions that you might want to use in your applications:
\par 
\par }\pard \ql \li360\ri360\nowidctlpar\faauto\rin360\lin360\itap0 {\insrsid15008649 -\~\~\~ the following two protected virtual functions can be overridden in order to customize the appearance of the dropdown button:
\par 
\par }{\b\insrsid15008649 virtual CRect DrawButtonFrame(CDC* pDC, CRect rect, BOOL bPressed);
\par virtual void DrawButtonImage(CDC* pDC, CRect rect, BOOL bPressed);}{\insrsid15008649 
\par 
\par -\~\~\~ the following functions can be used in order to set/retrieve the width of the dropdown button:
\par 
\par }{\ul\cf2\insrsid15008649 SetButtonWidth(); 
\par GetButtonWidth();}{\insrsid15008649 
\par 
\par -\~\~\~ these functions can be used in order to show/hide the dropdown button and to retrieve the flag that specifies the visibility of the dropdown button:
\par 
\par }{\ul\cf2\insrsid15008649 void ShowButton();
\par BOOL IsButtonVisible();}{\insrsid15008649 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid15008649 
\par As we mentioned before we use COXDropEdit derivation with our COXPhysicalEdit class. Also we designed and implemented a number of COXDropEdit derived classes with predefined functionality. These classes are: }{\ul\cf2\insrsid15008649 COXBrowseColorEdit}{
\insrsid15008649  (edit control with color picker using our }{\ul\cf2\insrsid15008649 COXColorPickerCtrl}{\insrsid15008649 ), }{\ul\cf2\insrsid15008649 COXBrowseDirEdit}{\insrsid15008649  (edit control with Directory Picker using our }{
\ul\cf2\insrsid15008649 COXFolderPicker}{\insrsid15008649 ), }{\ul\cf2\insrsid15008649 COXBrowseDirEdit16}{\insrsid15008649  (edit control with Directory Picker using our }{\ul\cf2\insrsid15008649 COXDirectoryDialog}{\insrsid15008649 ), }{
\ul\cf2\insrsid15008649 COXBrowseFileEdit}{\insrsid15008649  (edit control with File Picker using standard }{\b\insrsid15008649 CFileDialog}{\insrsid15008649 ).
\par \~
\par }{\fs20\insrsid15008649 
\par }}